name: QuizNose

on:
  pull_request:
    branches: [main]
    # workflow_dispatch allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Official GitHub Action used to check-out a repository so a workflow can access it...
        uses: actions/checkout@v2

      - name: Building the Flask Application and serving it in background...
        run: |
          docker build -t quiznose-application -f docker/Dockerfile .
          docker run -d --rm -p 8080:5000 quiznose-application

      - name: Install Cypress Dependencies
        run: |
          cd cypress
          npm install

      - name: Executing Cypress Test using official Cypress GitHub Action...
        uses: cypress-io/github-action@v2
        with:
          wait-on: "http://localhost:8080"
          browser: firefox
          spec: ./cypress/integration/test.spec.js
          working-directory: ./cypress

  provision_aws_resources:
    needs: build_and_test
    runs-on: ubuntu-latest
    environment: "production"
    defaults:
      run:
        shell: bash

    steps:
      - name: Official GitHub Action used to check-out a repository so a workflow can access it...
        uses: actions/checkout@v2

      - name: Official Terraform action which uses a JavaScript action that sets up Terraform CLI in your GitHub Actions workflow...
        uses: hashicorp/setup-terraform@v1

      - name: Provides a mechanism to configure AWS credential and region environment variables for use in other GitHub Actions...
        uses: aws-actions/configure-aws-credentials@v1
        env:
          AWS_REGION: us-east-1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform format, initialize, plan, and apply resources...
        run: |
          cd terraform
          terraform fmt -recursive
          terraform init
          terraform plan
          terraform apply -auto-approve
          terraform output URL_TO_APPLICATION

  push_to_ecr:
    needs: provision_aws_resources
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Official GitHub Action used to check-out a repository so a workflow can access it...
        uses: actions/checkout@v2

      - name: Provides a mechanism to configure AWS credential and region environment variables for use in other GitHub Actions...
        uses: aws-actions/configure-aws-credentials@v1
        env:
          AWS_REGION: us-east-1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Logs into Amazon ECR with the local Docker client...
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push successful image to ECR with specific environment variables...
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  send_status:
    needs: push_to_ecr
    runs-on: ubuntu-latest

    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date)"
      - name: Send Status Email
        if: always()
        uses: dawidd6/action-send-mail@v2
        with:
          # mail server settings
          server_address: smtp.gmail.com
          server_port: 465
          # user credentials
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          # email subject
          subject: "QuizNose Job #${{ github.run_number }} result: ${{ job.status }} on ${{ steps.date.outputs.date }}"
          # email body as text
          body: '''
          Initiated by ${{ github.actor }}
          Event Trigger: ${{ github.event_name }}
          Pull Request Title: ${{ github.event.pull_request.title }}
          Job # ${{ github.job }}
          Workflow: ${{ github.workflow }}
          View the status here -> ${{ github.server_url }}/${{github.repository}}/actions/runs/${{github.run_id}}
          '''

          # comma-separated string, send email to
          to: ${{ secrets.COLLABORATOR_EMAIL }}
          # from email name
          from: QuizNose
